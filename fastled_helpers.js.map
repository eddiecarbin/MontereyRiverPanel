{"version": 3, "mappings": "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", "sources": ["fastled_helpers.py"], "names": ["__version__", "__repo__", "GFACTOR", "g_g", "g_b", "g_r", "fancy", "fancy.gamma_adjust", "n", "inplace", "applyGamma_video", "grad", "src", "src.length", "grad.append", "i", "fancy.CRGB", "fancy.expand_gradient", "size", "blend", "pos", "pal", "pal.length", "floor", "color", "fancy.palette_lookup", "brightness", "fancy.CHSV", "fancy.unpack", "color.red", "color.green", "color.blue", "hue", "sat", "val"], "sourcesContent": ["# The MIT License (MIT)\n#\n# Copyright (c) 2017 PaintYourDragon for Adafruit Industries\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\"\"\"\n`adafruit_fancyled.fastled_helpers`\n====================================================\n\nCircuitPython \"helper\" library based on the Arduino FastLED library.\nUses similar function names to assist with porting of existing Arduino FastLED\nprojects to CircuitPython.\n\n* Author(s): PaintYourDragon\n\"\"\"\n\n# imports\n\n__version__ = \"0.0.0-auto.0\"\n__repo__ = \"https://github.com/Adafruit/Adafruit_CircuitPython_FancyLED.git\"\n\nfrom math import floor\nfrom adafruit_fancyled import adafruit_fancyled as fancy\n\n# These are helper functions that provide more FastLED-like calls for\n# fancyled functions.\n# Function names are kept the same as FastLED, which normally upsets pylint.\n# Disable name-checking so this passes muster.\n# pylint: disable=invalid-name\n\nGFACTOR = 2.5  # Default gamma-correction factor for function below\n\n\ndef applyGamma_video(n, g_r=GFACTOR, g_g=None, g_b=None, inplace=False):\n    \"\"\" Approximates various invocations of FastLED's many-ways-overloaded\n    applyGamma_video() function.\n\n    ACCEPTS: One of three ways:\n      1. A single brightness level (0-255) and optional gamma-correction\n         factor (float usu. > 1.0, default if unspecified is 2.5).\n      2. A single CRGB, CHSV or packed integer type and optional gamma\n         factor or separate R, G, B gamma values.\n      3. A list of CRGB, CHSV or packed integer types (and optional gamma(s)).\n\n      In the tuple/list cases, the 'inplace' flag determines whether\n      a new tuple/list is calculated and returned, or the existing\n      value is modified in-place.  By default this is 'False'.\n      Can also use the napplyGamma_video() function to more directly\n      approximate FastLED syntax/behavior.\n\n    RETURNS: Corresponding to above cases:\n      1. Single gamma-corrected brightness level (0-255).\n      2. A gamma-corrected CRGB value (even if input is CHSV or packed).\n      3. A list of gamma-corrected CRGB values.\n\n      In the tuple/list cases, there is NO return value if 'inplace'\n      is true -- the original values are modified.\n    \"\"\"\n\n    # If single gamma value is passed, keep that, otherwise convert\n    # gamma values to tuple for gamma_adjust function.\n    if g_g is not None and g_b is not None:\n        g_r = (g_r, g_g, g_b)\n\n    return fancy.gamma_adjust(n, g_r, inplace=inplace)\n\n\ndef napplyGamma_video(n, g_r=GFACTOR, g_g=None, g_b=None):\n    \"\"\" In-place version of applyGamma_video() (to mimic FastLED function\n    name).  This is for RGB tuples and tuple lists (not the prior function's\n    integer case)\n    \"\"\"\n\n    return applyGamma_video(n, g_r, g_g, g_b, inplace=True)\n\n\ndef loadDynamicGradientPalette(src, size):\n    \"\"\" Kindasorta like FastLED's loadDynamicGradientPalette() function,\n    with some gotchas.\n\n    ACCEPTS: Gradient palette data as a 'bytes' type (makes it easier to copy\n             over gradient palettes from existing FastLED Arduino sketches)...\n             each palette entry is four bytes: a relative position (0-255)\n             within the overall resulting palette (whatever its size), and\n             3 values for R, G and B...and a length for a new palette list\n             to be allocated.\n\n    RETURNS: list of CRGB colors.\n    \"\"\"\n\n    # Convert gradient from bytelist (groups of 4) to list of tuples,\n    # each consisting of a position (0.0 to 1.0) and CRGB color.\n    # (This is what FancyLED's expand_gradient needs for input.)\n    grad = []\n    for i in range(0, len(src), 4):\n        grad.append((src[i] / 255.0, fancy.CRGB(src[i + 1], src[i + 2], src[i + 3])))\n\n    # Create palette (CRGB list) matching 'size' length\n    return fancy.expand_gradient(grad, size)\n\n\ndef ColorFromPalette(pal, pos, brightness=255, blend=False):\n    \"\"\" Approximates the FastLED ColorFromPalette() function\n\n    ACCEPTS: color palette (list of CRGB, CSHV and/or packed ints),\n             palette index (x16) + blend factor of next index (0-15) --\n             e.g. pass 32 to retrieve palette index 2, or 40 for an\n             interpolated value between palette index 2 and 3, optional\n             brightness (0-255), optional blend flag (True/False)\n\n    RETURNS: CRGB color, no gamma correction\n    \"\"\"\n\n    # Alter 'pos' from FastLED-like behavior to fancyled range\n    if blend:\n        # Continuous interpolation 0.0 to 1.0\n        pos = (pos / 16.0) / len(pal)\n    else:\n        # No blending -- quantize to nearest palette bin\n        pos = floor(pos / 16.0) / len(pal)\n\n    color = fancy.palette_lookup(pal, pos)\n\n    if brightness < 1.0:\n        brightness /= 255.0\n        if isinstance(color, fancy.CHSV):\n            color = fancy.CRGB(color)\n        elif isinstance(color, int):\n            color = fancy.unpack(color)\n        color.red *= brightness\n        color.green *= brightness\n        color.blue *= brightness\n\n    return color\n\n\ndef hsv2rgb_spectrum(hue, sat, val):\n\n    \"\"\" This is named the same thing as FastLED's simpler HSV to RGB function\n    (spectrum, vs rainbow) but implementation is a bit different for the\n    sake of getting something running (adapted from some NeoPixel code).\n\n    ACCEPTS: hue, saturation, value in range 0 to 255\n    RETURNS: CRGB color.\n    \"\"\"\n\n    return fancy.CRGB(fancy.CHSV(hue / 255, sat / 255, val / 255))\n\n\n# pylint: enable=invalid-name\n"
    ]
}